
Test "Standard Upgrade"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    -- Upgrade to G1
    ComptrollerImpl Deploy ScenarioG1 ScenComptrollerG1
    Unitroller SetPendingImpl ScenComptrollerG1
    ComptrollerImpl ScenComptrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ScenComptrollerG1)
    -- Upgrade to G*
    ComptrollerImpl Deploy Scenario ScenComptroller
    Unitroller SetPendingImpl ScenComptroller
    ComptrollerImpl ScenComptroller Become
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ScenComptroller)

Test "Standard Upgrade, then downgrade then upgrade again"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    -- Upgrade to G1
    ComptrollerImpl Deploy ScenarioG1 ScenComptrollerG1
    Unitroller SetPendingImpl ScenComptrollerG1
    ComptrollerImpl ScenComptrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ScenComptrollerG1)
    -- Upgrade to G*
    ComptrollerImpl Deploy Scenario ScenComptroller
    Unitroller SetPendingImpl ScenComptroller
    ComptrollerImpl ScenComptroller Become
    Comptroller SetPauseGuardian Coburn
    Assert Equal (Comptroller PauseGuardian) (Address Coburn)
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ScenComptroller)
    -- Downgrade to G1
    Unitroller SetPendingImpl ScenComptrollerG1
    ComptrollerImpl ScenComptrollerG1 Recome
    Assert ReadRevert (Comptroller PauseGuardian) "revert"
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ScenComptrollerG1)
    -- Upgrade again
    Unitroller SetPendingImpl ScenComptroller
    ComptrollerImpl ScenComptroller Become
    Assert Equal (Comptroller PauseGuardian) (Address Coburn)
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ScenComptroller)

Pending "Once become, can become again"
    -- TODO: See why ABI is broken here
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    ComptrollerImpl Deploy ScenarioG1 ScenComptrollerG1
    Unitroller SetPendingImpl ScenComptrollerG1
    ComptrollerImpl ScenComptrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ScenComptrollerG1)
    ComptrollerImpl Deploy ScenarioG1 ScenComptrollerG1_2
    Unitroller SetPendingImpl ScenComptrollerG1_2
    ComptrollerImpl ScenComptrollerG1_2 BecomeG1 (PriceOracle Address) 0.4 40
    Assert Equal (Comptroller CloseFactor) 0.4
    Assert Equal (Comptroller MaxAssets) 40
    Assert Equal (Comptroller Implementation) (Address ScenComptrollerG1_2)

Test "Recome has default values"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    ComptrollerImpl Deploy ScenarioG1 ScenComptrollerG1
    Unitroller SetPendingImpl ScenComptrollerG1
    ComptrollerImpl ScenComptrollerG1 Recome
    Assert Equal (Comptroller CloseFactor) 0.0
    Assert Equal (Comptroller MaxAssets) 0
    Assert Equal (Comptroller Implementation) (Address ScenComptrollerG1)

Test "Bork and unbork"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    ComptrollerImpl Deploy ScenarioG1 ScenComptrollerG1
    -- Set a normal impl
    Unitroller SetPendingImpl ScenComptrollerG1
    ComptrollerImpl ScenComptrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ScenComptrollerG1)
    -- Now move to a borked one that's bad
    ComptrollerImpl Deploy Borked MyBork
    Unitroller SetPendingImpl MyBork
    ComptrollerImpl MyBork BecomeG1 (PriceOracle Address) 0.4 40
    Assert ReadRevert (Comptroller CloseFactor) "revert"
    Assert Equal (Comptroller Implementation) (Address MyBork)
    -- Now change back to the first good one
    Unitroller SetPendingImpl ScenComptrollerG1
    ComptrollerImpl ScenComptrollerG1 Recome
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ScenComptrollerG1)

Test "Keeps all storage"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    ComptrollerImpl Deploy ScenarioG1 ScenComptrollerG1
    --
    Unitroller SetPendingImpl ScenComptrollerG1
    ComptrollerImpl ScenComptrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    NewCToken ZRX cZRX
    NewCToken BAT cBAT
    Give cBAT 10e18 BAT -- Faucet some bat to borrow
    Support cZRX collateralFactor:0.5
    Support cBAT collateralFactor:0.4
    Prep Geoff Some ZRX cZRX
    Mint Geoff 100e18 cZRX
    EnterMarkets Geoff cZRX cBAT
    Borrow Geoff 1e18 cBAT
    --
    -- Unitroller Storage
    --
    -- Admin; 0
    Assert Equal (Comptroller Admin) (Address Root)
    Assert Equal (StorageAt Comptroller 0 0 "address") (Address Root)
    -- PendingAdmin; 1
    Comptroller SetPendingAdmin Coburn
    Assert Equal (Comptroller PendingAdmin) (Address Coburn)
    Assert Equal (StorageAt Comptroller 1 0 "address") (Address Coburn)
    -- ComptrollerImplementation; 2
    Assert Equal (Unitroller Implementation) (Address ScenComptrollerG1)
    Assert Equal (StorageAt Comptroller 2 0 "address") (Address ScenComptrollerG1)
    -- PendingComptrollerImplementation; 3
    ComptrollerImpl Deploy Scenario ScenComptroller
    Unitroller SetPendingImpl ScenComptroller
    Assert Equal (Unitroller PendingImplementation) (Address ScenComptroller)
    Assert Equal (StorageAt Comptroller 3 0 "address") (Address ScenComptroller)
    --
    -- V1 Storage
    --
    -- Oracle; 4
    Assert Equal (Comptroller PriceOracle) (Address PriceOracle)
    Assert Equal (StorageAt Comptroller 4 0 "address") (Address PriceOracle)
    -- CloseFactorMantissa; 5
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (StorageAt Comptroller 5 0 "number") 0.2
    -- LiquidationIncentiveMantissa; 6
    Assert Equal (Comptroller LiquidationIncentive) 1
    Assert Equal (StorageAt Comptroller 6 0 "number") 1
    -- MaxAssets; 7
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (StorageAt Comptroller 7 0 "number") 20
    --
    -- AccountAssets; 8 *
    Assert Equal (StorageAt Comptroller 8 0 "number") 0
    Assert Equal (StorageAtMapping Comptroller 8 (Address Geoff) "number") 2
    Assert Equal (StorageAtMapping Comptroller 8 (Address Geoff) "list(address)") [(Address cZRX) (Address cBAT)]
    Assert Equal (Comptroller AssetsIn Geoff) [(Address cZRX) (Address cBAT)]
    -- Markets; 9 *
    Assert Equal (StorageAt Comptroller 9 0 "number") 0
    Assert Equal (StorageAtNestedMapping Comptroller 9 (Address cZRX) Geoff "marketStruct") [True 0.5 True]
    Assert Equal (StorageAtNestedMapping Comptroller 9 (Address cBAT) Geoff "marketStruct") [True 0.4 True]
    Assert Equal (StorageAtNestedMapping Comptroller 9 (Address cBAT) Coburn "marketStruct") [True 0.4 False]
    Assert Equal (Comptroller CollateralFactor cZRX) 0.5
    Assert Equal (Comptroller CollateralFactor cBAT) 0.4
    Assert Equal (Comptroller CheckMembership Geoff cZRX) True
    Assert Equal (Comptroller CheckMembership Geoff cBAT) True
           --
    ComptrollerImpl ScenComptroller Become
    --
    -- Recheck all unitroller and v1 storage
    --
    -- Unitroller Storage again
    --
    -- Admin; 0
    Assert Equal (StorageAt Comptroller 0 0 "address") (Address Root)
    -- PendingAdmin; 1
    Assert Equal (StorageAt Comptroller 1 0 "address") (Address Coburn)
    -- ComptrollerImplementation; 2
    Assert Equal (Unitroller Implementation) (Address ScenComptroller)
    Assert Equal (StorageAt Comptroller 2 0 "address") (Address ScenComptroller)
    -- PendingComptrollerImplementation; 3
    -- check as number since casting address 0 is not defined
    Assert Equal (StorageAt Comptroller 3 0 "number") 0
    --
    -- V1 Storage again
    --
    -- Oracle; 4
    Assert Equal (Comptroller PriceOracle) (Address PriceOracle)
    Assert Equal (StorageAt Comptroller 4 0 "address") (Address PriceOracle)
    --
    -- CloseFactorMantissa; 5
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (StorageAt Comptroller 5 0 "number") 0.2
    --
    -- LiquidationIncentiveMantissa; 6
    Assert Equal (Comptroller LiquidationIncentive) 1
    Assert Equal (StorageAt Comptroller 6 0 "number") 1
    --
    -- MaxAssets; 7
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (StorageAt Comptroller 7 0 "number") 20
    --
    -- AccountAssets; 8 *
    Assert Equal (StorageAt Comptroller 8 0 "number") 0
    Assert Equal (StorageAtMapping Comptroller 8 (Address Geoff) "number") 2
    Assert Equal (StorageAtMapping Comptroller 8 (Address Geoff) "list(address)") [(Address cZRX) (Address cBAT)]
    Assert Equal (Comptroller AssetsIn Geoff) [(Address cZRX) (Address cBAT)]
    -- Markets; 9 *
    Assert Equal (Comptroller CollateralFactor cZRX) 0.5
    Assert Equal (Comptroller CollateralFactor cBAT) 0.4
    Assert Equal (Comptroller CheckMembership Geoff cZRX) True
    Assert Equal (Comptroller CheckMembership Geoff cBAT) True
    Assert Equal (Comptroller CheckMembership Coburn cBAT) False
    Assert Equal (StorageAt Comptroller 9 0 "number") 0
    Assert Equal (StorageAtNestedMapping Comptroller 9 (Address cZRX) Geoff "marketStruct") [True 0.5 True]
    Assert Equal (StorageAtNestedMapping Comptroller 9 (Address cBAT) Geoff "marketStruct") [True 0.4 True]
    Assert Equal (StorageAtNestedMapping Comptroller 9 (Address cBAT) Coburn "marketStruct") [True 0.4 False]
    Assert Equal (Comptroller CollateralFactor cZRX) 0.5
    Assert Equal (Comptroller CollateralFactor cBAT) 0.4
    Assert Equal (Comptroller CheckMembership Geoff cZRX) True
    Assert Equal (Comptroller CheckMembership Geoff cBAT) True
    --
    -- V2 Storage
    --
    -- PauseGuardian; 10
    Comptroller SetPauseGuardian Coburn
    Assert Equal (Comptroller PauseGuardian) (Address Coburn)
    Assert Equal (StorageAt Comptroller 10 0 "address") (Address Coburn)
    --
    -- MintGuardianPaused; 11
    Assert Equal (StorageAt Comptroller 10 40 "bool") False
    Assert Equal (Comptroller MintGuardianPaused) False
    From Coburn (Comptroller SetGuardianPaused "Mint" True)
    Assert Equal (Comptroller MintGuardianPaused) True
    Assert Equal (StorageAt Comptroller 10 40 "bool") True
    --
    -- BorrowGuardianPaused; 12
    Assert Equal (StorageAt Comptroller 10 42 "bool") False
    From Coburn (Comptroller SetGuardianPaused "Borrow" True)
    Assert Equal (Comptroller BorrowGuardianPaused) True
    Assert Equal (StorageAt Comptroller 10 42 "bool") True
    --
    -- TransferGuardianPaused; 13
    Assert Equal (StorageAt Comptroller 10 44 "bool") False
    From Coburn (Comptroller SetGuardianPaused "Transfer" True)
    Assert Equal (Comptroller TransferGuardianPaused) True
    Assert Equal (StorageAt Comptroller 10 44 "bool") True
    --
    -- SeizeGuardianPaused; 14
    Assert Equal (StorageAt Comptroller 10 46 "bool") False
    From Coburn (Comptroller SetGuardianPaused "Seize" True)
    Assert Equal (Comptroller SeizeGuardianPaused) True
    Assert Equal (StorageAt Comptroller 10 46 "bool") True
