
exchangeRateDecreases(uint result, address minter, uint256 mintAmount, uint256 mintTokens) {
    // Pre/action/post environments
    env e0;
    env e1;
    env e2;

    require e1.block.number >= e0.block.number;
    require e2.block.number >= e1.block.number;

    // Any other account
    address other;
    require other != minter && other != currentContract;
    require minter != currentContract;

    uint256 exchangeRatePre = sinvoke exchangeRateCurrent(e0);

    uint256 cTokenCashPre = sinvoke getCash(e0);
    uint256 cTokenBorrowsPre = sinvoke totalBorrows(e0);
    uint256 cTokenTokensPre = sinvoke totalSupply(e0);
    uint256 cTokenReservesPre = sinvoke totalReserves(e0);
    uint256 cTokenSupplyPre = cTokenCashPre + cTokenBorrowsPre - cTokenReservesPre;

    // Simplifying assumptions to analyze the vulnerability
    require cTokenBorrowsPre == 0; // XXX not necessary, simplifies analysis
    require cTokenSupplyPre >= 0; // XXX not necessary, should underflow
    require cTokenTokensPre > 0; // XXX not necessary
    require exchangeRatePre * cTokenTokensPre == cTokenSupplyPre * 1000000000000000000; // XXX

    // XXX why does this have to be after require?
    uint256 implicitExchangeRatePre = cTokenSupplyPre * 1000000000000000000 / cTokenTokensPre;

    require result == invoke mintFreshPub(e1, minter, mintAmount);
    bool mintFreshReverted = lastReverted;

    uint256 exchangeRatePost = sinvoke exchangeRateCurrent(e2);

    uint256 cTokenCashPost = sinvoke getCash(e2);
    uint256 cTokenBorrowsPost = sinvoke totalBorrows(e2);
    uint256 cTokenTokensPost = sinvoke totalSupply(e2);
    uint256 cTokenReservesPost = sinvoke totalReserves(e2);
    uint256 cTokenSupplyPost = cTokenCashPost + cTokenBorrowsPost - cTokenReservesPost;

    require mintTokens == cTokenTokensPost - cTokenTokensPre;
    require exchangeRatePre * mintTokens == mintAmount * 1000000000000000000;  // XXX why would this need to be assumed? should be proven

    uint256 implicitExchangeRatePost = cTokenSupplyPost * 1000000000000000000 / cTokenTokensPost;

    assert (!mintFreshReverted =>
            ((result != 0) => (exchangeRatePost == exchangeRatePre))), "Mismatch in failure case";
    assert (!mintFreshReverted => (exchangeRatePost >= exchangeRatePre)), "Exchange rate decreased";
    assert (!mintFreshReverted => (implicitExchangeRatePost >= implicitExchangeRatePre)), "Implicit exchange rate decreased";
}

/* mintFresh(uint result, address minter, uint256 mintAmount, uint256 mintTokens) */
/* description "Break mint with result=$result minter=$minter mintAmount=$mintAmount" { */
/*     // Pre/action/post environments */
/*     env e0; */
/*     env e1; */
/*     env e2; */

/*     require e1.block.number >= e0.block.number; */
/*     require e2.block.number >= e1.block.number; */

/*     // Any other account */
/*     address other; */
/*     require other != minter && other != currentContract; */
/*     require minter != currentContract; */

/*     /\* */
/*       - exchange rate should not change */
/*       - errors should have no effect */
/*       - no *other* storage should change - XXX can we specify this? */

/*       |----------+--------+--------+-------| */
/*       |          | CToken | Minter | Other | */
/*       |----------+--------+--------+-------| */
/*       | cash     |   +A   |   -A   |   0   | */
/*       | borrows  |    0   |    0   |   0   | */
/*       | tokens   |   +T   |   +T   |   0   | */
/*       | reserves |    0   |        |       | */
/*       |----------+--------+--------+-------| */
/*     *\/ */

/*     /\* Pre *\/ */

/*     // XXX remove comptrollerXXX */
/*     uint256 exchangeRatePre = sinvoke exchangeRateCurrent(e0); // XXX was stored */

/*     uint256 cTokenCashPre = sinvoke getCash(e0); */
/*     uint256 minterCashPre = sinvoke getCashOf(e0, minter); */
/*     uint256 otherCashPre = sinvoke getCashOf(e0, other); */

/*     uint256 cTokenBorrowsPre = sinvoke totalBorrows(e0); */
/*     uint256 minterBorrowsPre = sinvoke borrowBalanceStored(e0, minter); */
/*     uint256 otherBorrowsPre = sinvoke borrowBalanceStored(e0, other); */

/*     uint256 cTokenTokensPre = sinvoke totalSupply(e0); */
/*     uint256 minterTokensPre = sinvoke balanceOf(e0, minter); */
/*     uint256 otherTokensPre = sinvoke balanceOf(e0, other); */

/*     uint256 cTokenReservesPre = sinvoke totalReserves(e0); */

/*     uint256 cTokenSupplyPre = cTokenCashPre + cTokenBorrowsPre - cTokenReservesPre; // XXX */

/*     // A few constraints */
/*     require cTokenBorrowsPre == 0; // XXX */
/*     require cTokenSupplyPre >= 0; // XXX shouldn't be necessary, should underflow */
/*     require cTokenTokensPre > 0; // XXX shouldn't be necessary */
/*     //require exchangeRatePre == 2000000000000000000; // XXX */
/*     require exchangeRatePre * cTokenTokensPre == cTokenSupplyPre; // XXX */
/*     require minterTokensPre + otherTokensPre <= cTokenTokensPre; // XXX shouldn't be necessary, though weird */
/*     require mintAmount == mintTokens * exchangeRatePre; */

/*     // Just do it */
/*     require result == invoke mintFreshPub(e1, minter, mintAmount); */
/*     bool mintFreshReverted = lastReverted; */

/*     /\* Post *\/ */

/*     uint256 exchangeRatePost = sinvoke exchangeRateStored(e2); */

/*     uint256 cTokenCashPost = sinvoke getCash(e2); */
/*     uint256 minterCashPost = sinvoke getCashOf(e2, minter); */
/*     uint256 otherCashPost = sinvoke getCashOf(e2, other); */

/*     uint256 cTokenBorrowsPost = sinvoke totalBorrows(e2); */
/*     uint256 minterBorrowsPost = sinvoke borrowBalanceStored(e2, minter); */
/*     uint256 otherBorrowsPost = sinvoke borrowBalanceStored(e2, other); */

/*     uint256 cTokenTokensPost = sinvoke totalSupply(e2); */
/*     uint256 minterTokensPost = sinvoke balanceOf(e2, minter); */
/*     uint256 otherTokensPost = sinvoke balanceOf(e2, other); */

/*     uint256 cTokenReservesPost = sinvoke totalReserves(e2); */

/*     // Measure */
/*     bool staticBalance = */
/*         (exchangeRatePost == exchangeRatePre) && */
/*         (cTokenCashPost == cTokenCashPre) && */
/*         (cTokenBorrowsPost == cTokenBorrowsPre) && */
/*         (cTokenTokensPost == cTokenTokensPre) && */
/*         (cTokenReservesPost == cTokenReservesPre) && */
/*         (minterCashPost == minterCashPre) && */
/*         (minterBorrowsPost == minterBorrowsPre) && */
/*         (minterTokensPost == minterTokensPre) && */
/*         (otherCashPost == otherCashPre) && */
/*         (otherBorrowsPost == otherBorrowsPre) && */
/*         (otherTokensPost == otherTokensPre); */

/*     bool dynamicBalance = */
/*         (mintAmount != 0) && */
/*         (exchangeRatePost >= exchangeRatePre) && // XXX ugh */
/*         (cTokenCashPost == cTokenCashPre + mintAmount) && */
/*         (cTokenBorrowsPost == cTokenBorrowsPre) && */
/*         //XXX(cTokenTokensPost == cTokenTokensPre + mintTokens) && */
/*         (cTokenReservesPost == cTokenReservesPre) && */
/*         (minterCashPost == minterCashPre - mintAmount) && */
/*         (minterBorrowsPost == minterBorrowsPre) && */
/*         //XXX(minterTokensPost == minterTokensPre + mintTokens) && */
/*         (otherCashPost == otherCashPre) && */
/*         (otherBorrowsPost == otherBorrowsPre) && */
/*         (otherTokensPost == otherTokensPre); */

/*     assert (!mintFreshReverted => */
/*             ((result != 0 || mintAmount == 0) <=> staticBalance)), "Mismatch in static case"; */
/*     assert (!mintFreshReverted => */
/*             ((result == 0 && mintAmount != 0) <=> dynamicBalance)), "Mismatch in dynamic case"; */
/* } */

/* redeemFresh(uint result, address account, uint256 amountCTokens, uint256 amountUnderlying) */
/* description "Failed to redeemFresh fresh asset with result $result (account=$account, amountCTokens=$amountCTokens, amountUnderlying=$amountUnderlying)" { */
/* 	// Free Variables */
/* 	env e0; // pre */
/* 	env e1; // invocation */
/* 	env e1b; // invocations on behalf of CToken */
/* 	env e2; // post */

/* 	// Strict ordering */
/* 	require e1.block.number >= e0.block.number; */
/* 	require e2.block.number >= e1.block.number; */

/*         // Redeeming from self is assumed to be impossible */
/*         require account != currentContract; */

/* 	// Capture current values */
/* 	uint256 totalSupplyPre = sinvoke totalSupply(e0); */
/* 	uint256 accountSupplyPre = sinvoke balanceOf(e0, account); */
/* 	uint256 marketBlockNumber = sinvoke accrualBlockNumber(e0); */
/* 	uint256 cash = sinvoke getCash(e0); */

/* 	// Simulate checks that depend on external contracts */
/* 	uint comptrollerCheckResult = sinvoke comptrollerRedeemAllowed(e1, currentContract, account, amountCTokens); // Should include amountUnderlying? */

/* 	// Invoke mintFresh */
/* 	require result == invoke redeemFreshPub(e1, account, amountCTokens, amountUnderlying); */
/* 	bool redeemFreshReverted = lastReverted; */

/* 	// Get next values */
/* 	uint256 totalSupplyPost = sinvoke totalSupply(e2); */
/* 	uint256 accountSupplyPost = sinvoke balanceOf(e2, account); */
/* 	uint256 newCash = sinvoke getCash(e2); */

/* 	// Helper for checking balance has not changed */
/* 	bool staticBalance = */
/*             (totalSupplyPost == totalSupplyPre && */
/*              accountSupplyPost == accountSupplyPre && */
/*              cash == newCash); */

/* 	// Helper for checking balance has not changed, as expected. */
/* 	// Precise change is computed in cTokenComputationLemma */
/* 	bool dynamicBalanceBasic = (totalSupplyPre - totalSupplyPost == accountSupplyPre - accountSupplyPost) // Change in totalSupply is same as change in accountSupply */
/*             && (totalSupplyPre - totalSupplyPost >= 0) // The change in supplies must be <= 0 */
/*             && (cash - newCash >= 0); // This operation transfers out */
/* 	bool dynamicBalanceRedeemingUnderlying = (cash - newCash == amountUnderlying); // The change in cash must be amount */
/* 	bool dynamicBalanceRedeemingCToken = (totalSupplyPre-totalSupplyPost == amountCTokens); // The change in CToken must be -amountCTokens */
/* 	bool dynamicBalanceAdvanced = ((amountCTokens > 0 && amountUnderlying == 0) => dynamicBalanceRedeemingCToken) */
/*             && ((amountCTokens == 0 && amountUnderlying > 0) => dynamicBalanceRedeemingUnderlying) */
/*             && ((amountCTokens == 0 && amountUnderlying == 0) => (dynamicBalanceRedeemingCToken && dynamicBalanceRedeemingUnderlying)) */
/*             && !(amountCTokens > 0 && amountUnderlying > 0); */

/* 	bool comptrollerCheckSuccess = comptrollerCheckResult == 0; */
/* 	bool accrued = marketBlockNumber == e1.block.number; */
/* 	bool checkTransferSuccess = cash >= amountUnderlying; */

/* 	// Track error codes */
/* 	uint256 NO_ERROR = 0; */
/* 	uint256 COMPTROLLER_REJECTION = 3; */
/* 	uint256 NOT_ACCRUED = 10; */
/* 	uint256 CHECK_TRANSFER_FAILED = 14; // TOKEN_INSUFFICIENT_CASH */
/* 	uint256 TOKEN_TRANSFER_OUT_FAILED = 16; */
/* 	uint256 MATH_ERROR = 9; */

/* 	// Guarantee return values */
/* 	assert (!redeemFreshReverted && result != MATH_ERROR) => ( */
/* 	  result == NO_ERROR || */
/* 	  result == COMPTROLLER_REJECTION || */
/* 	  result == NOT_ACCRUED || */
/* 	  result == CHECK_TRANSFER_FAILED || */
/* 	  result == TOKEN_TRANSFER_OUT_FAILED || */
/* 	  result == MATH_ERROR */
/* 	), "Got unexpected error code $result"; */


/* 	// Success case updates market accordingly */
/* 	assert (!redeemFreshReverted && result != MATH_ERROR) => (result == NO_ERROR <=> ( */
/* 		comptrollerCheckSuccess && */
/* 		accrued && */
/* 		checkTransferSuccess && */
/* 		doTransferSuccess && */
/* 		dynamicBalanceBasic && */
/* 		dynamicBalanceAdvanced */
/* 	)), "Mismatch in no error case (0). Got result $result"; */

/* 	// Policy hook rejected case */
/* 	assert (!redeemFreshReverted && result != MATH_ERROR) => (result == COMPTROLLER_REJECTION <=> ( */
/* 		!comptrollerCheckSuccess && */
/* 		staticBalance */
/* 	)), "Mismatch in comptroller rejection case (3=0x3). Got result $result"; */

/* 	// Not accrued */
/* 	assert (!redeemFreshReverted && result != MATH_ERROR) => (result == NOT_ACCRUED <=> ( */
/* 		comptrollerCheckSuccess && */
/* 		!accrued && */
/* 		staticBalance */
/* 	)), "Mismatch in non-accrued case (10=0xa). Got result $result"; */

/* 	// Check transfer failure */
/* 	// Note that since if amountUnderlying == 0 we do not compute in the spec the computed amountUnderlying, so we skip the test for now */
/* 	assert (!redeemFreshReverted && result != MATH_ERROR && amountUnderlying > 0) => ((result == CHECK_TRANSFER_FAILED) <=> ( */
/* 		comptrollerCheckSuccess && */
/* 		accrued && */
/* 		!checkTransferSuccess && */
/* 		staticBalance */
/* 	)), "Mismatch in check transfer failure (14). Got result $result"; */

/* 	// Do transfer failure */
/* 	// Should be: assert !doTransferSuccess => redeemFreshReverted; */
/* 	assert (!redeemFreshReverted && result != MATH_ERROR) => (result == TOKEN_TRANSFER_OUT_FAILED <=> */
/* 	( */
/* 		comptrollerCheckSuccess && */
/* 		accrued && */
/* 		checkTransferSuccess && */
/* 		!doTransferSuccess && */
/* 		staticBalance */
/* 	)), "Mismatch in do transfer failure (16). Got result $result"; */

/* 	// Math error -> no state changes (at least, the ones we observe here! This is not checking about the FULL state of the contract) */
/* 	// SG: Idea - this could be a useful check that is reused across many of Compound's functions that may return math error codes, and will be more thorough. */
/* 	assert !redeemFreshReverted => (result == MATH_ERROR => */
/* 	( */
/* 		staticBalance && */
/* 		newCash == cash */
/* 	)), "State changes occuring despite math error, totalSupplyPre=$totalSupplyPre, totalSupplyPost=$totalSupplyPost ; accountSupplyPre=$accountSupplyPre, accountSupplyPost=$accountSupplyPost"; */
/* } */

/* mintThenRedeem(address account, uint256 amountUnderlying) */
/* description "Mint and redeem are not inverses for account $account, amount $amountUnderlying" */
/* { */
/*     env e0; */

/*     uint origCash = sinvoke getCash(e0); */

/*     // both calls are "fresh" */
/*     uint resultMint = invoke mintFreshPub(e0, account, amountUnderlying); */
/*     bool revertedMint = lastReverted; */

/*     uint resultRedeem = invoke redeemFreshPub(e0, account, 0, amountUnderlying); */
/*     bool revertedRedeem = lastReverted; */

/*     uint newCash = sinvoke getCash(e0); */

/*     assert (resultMint == 0 && !revertedMint && resultRedeem == 0 && !revertedRedeem) => newCash == origCash; */

/*     // check that exchange rate is the same, check all the 4 variables that affect the exchange rate are retained. */
/*     // check that accounts balances are the same. */
/*     // the only thing that changes is the interest index. rounding errors. */
/* } */
